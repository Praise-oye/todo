{"ast":null,"code":"var _jsxFileName = \"/Users/square1-praise/Documents/HyperionDev Assignment/Level 3/Task 09 Assignment-P022020002822/todolist/frontend/src/App.js\";\nimport React from \"react\";\n\n// Import custom stylesheet\nimport \"./App.css\";\n\n// Import bootstrap styles\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Import components\nimport ListForm from \"./Components/ListForm\";\nimport Header from \"./Components/Header\";\nimport DisplayList from \"./Components/DisplayList\";\n\n// App component Display to do list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial state variables. Includes array to store to do list.\n    this.state = {\n      username: null,\n      password: null,\n      currentUser: null,\n      users: [],\n      pwords: [],\n      token: \"\",\n      isLoaded: false,\n      items: [],\n      idArray: [],\n      userArray: [],\n      item: null,\n      itemToDelete: \"\",\n      loggedIn: false,\n      message: \"\",\n      error: null\n    };\n\n    // Binding to make \"this\" work correctly\n    this.handleUsername = this.handleUsername.bind(this);\n    this.handlePassword = this.handlePassword.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.handleAuth = this.handleAuth.bind(this);\n    this.getList = this.getList.bind(this);\n    this.handleItemToAdd = this.handleItemToAdd.bind(this);\n    this.handleAddItem = this.handleAddItem.bind(this);\n    this.handleDeleteItem = this.handleDeleteItem.bind(this);\n    this.reloadList = this.reloadList.bind(this);\n  }\n\n  // Function to log user out when they click \"logout\" button in header\n  handleLogout(event) {\n    this.setState({\n      loggedIn: false,\n      isLoaded: false,\n      username: null,\n      password: null,\n      currentUser: null,\n      item: null,\n      token: null,\n      message: null\n    }, () => {\n      console.log(\"User logged out.\");\n      this.reloadList();\n    });\n  }\n\n  // Add/save list item to state prior to storing in db\n  handleItemToAdd(event) {\n    let value = event.target.value;\n    let trimmedItem = value.trim();\n    this.setState({\n      item: trimmedItem\n    });\n  }\n\n  // Functions to save username and password to state when user types them in to login form in header\n  handleUsername(event) {\n    let value = event.target.value;\n    let user = value.trim();\n    this.setState({\n      username: user\n    }, () => {\n      console.log(\"Username saved: \" + this.state.username);\n    });\n  }\n  handlePassword(event) {\n    let value = event.target.value;\n    let pwd = value.trim();\n    this.setState({\n      password: pwd\n    });\n  }\n  // --------------------------------------------------------- //\n\n  // Retrieve list items from db if token is valid\n  getList() {\n    if (this.state.message === \"Success! Token valid.\") {\n      console.log(\"Get list has run\");\n      fetch(\"/getList\").then(res => res.json()).then(result => {\n        this.setState({\n          isLoaded: true,\n          items: result.items,\n          idArray: result.id,\n          userArray: result.user\n        });\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    }\n  }\n\n  /* Takes token created in \"handleLogin\" function and authenticates user */\n  handleAuth() {\n    let token = this.state.token;\n    if (token !== undefined && token !== \"Incorrect login!\" && token !== null) {\n      fetch(\"/resource\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      }).then(res => res.json()).then(result => {\n        this.setState({\n          isLoaded: true,\n          loggedIn: true,\n          currentUser: result.currentUser,\n          message: result.message,\n          username: null,\n          password: null\n        }, () => {\n          console.log(\"handleAuth has run. Welcome, \" + this.state.currentUser);\n          this.getList();\n        });\n      }, error => {\n        this.setState({\n          error\n        });\n      });\n    } else {\n      document.forms[\"loginForm\"].reset();\n      alert(\"Incorrect login details. Please try again.\");\n      console.log(\"Invalid token. Not logged in.\");\n      this.reloadList();\n    }\n    // End of handleauth function\n  }\n\n  // Take user login details and create JWT token, then call \"handleAuth\" function to authenticate user\n  handleLogin(event) {\n    if (this.state.username !== null && this.state.password !== null) {\n      fetch(\"/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password,\n          users: this.state.users,\n          pwords: this.state.pwords\n        })\n      }).then(res => res.json()).then(result => {\n        this.setState({\n          token: result.message\n        }, () => {\n          console.log(\"Login details sent via post. Token is \" + this.state.token);\n          this.handleAuth();\n        });\n      }, error => {\n        this.setState({\n          error\n        });\n      });\n    } else {\n      this.setState({\n        isLoaded: false\n      }, () => {\n        console.log(\"Username and password fields blank.\");\n        alert(\"Please enter your username and password, then click 'Login' again.\");\n        this.reloadList();\n      });\n      // End of if statement to check that username and password fields are not empty\n    }\n\n    // End of handlelogin function\n  }\n\n  /* Register new user. Saves their login details to db and makes it so they can only access their own to do \n  list */\n  handleRegister(event) {\n    if (this.state.username !== null && this.state.password !== null) {\n      fetch(\"/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      }).then(res => res.json()).then(result => {\n        this.setState({\n          isLoaded: false\n        }, () => {\n          console.log(\"Registration details sent via post.\");\n          alert(\"New user, \" + this.state.username + \", registered. Please log in.\");\n          this.reloadList();\n        });\n      }, error => {\n        this.setState({\n          error\n        });\n      });\n    } else {\n      this.setState({\n        isLoaded: false\n      }, () => {\n        console.log(\"Username and password fields blank.\");\n        alert(\"Please enter your new username and password, then click 'Register' again.\");\n        this.reloadList();\n      });\n      // End of if statement to check that state variables \"username\" and \"password\" are not null\n    }\n    // End of handleregister function\n  }\n\n  // Handler function to delete a list item from database when user clicks the little red cross\n  handleDeleteItem(itemId) {\n    fetch(\"/delete\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: itemId\n      })\n    }).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: false\n      }, () => {\n        console.log(\"Post request to delete list item sent. \" + result.message);\n        this.reloadList();\n      });\n    }, error => {\n      this.setState({\n        isLoaded: false,\n        error\n      });\n    });\n    // End of handledeleteitem function\n  }\n\n  // Handler function to add list item to database when user submits form\n  handleAddItem() {\n    if (this.state.item !== null) {\n      fetch(\"/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user: this.state.currentUser,\n          item: this.state.item\n        })\n      }).then(res => res.json()).then(result => {\n        this.setState({\n          isLoaded: false\n        }, () => {\n          console.log(\"Post request to add list item sent. \" + result.message);\n          this.reloadList();\n        });\n      }, error => {\n        this.setState({\n          isLoaded: false,\n          error\n        });\n      });\n    } else {\n      this.setState({\n        isLoaded: false\n      }, () => {\n        alert(\"Form is blank. Please type in a list item to save, then click 'Add item' again.\");\n        this.reloadList();\n      });\n      // End of if statement to check that user has not submitted empty form field\n    }\n    // End of handleadditem function\n  }\n\n  /* Function to reload list of items from database after a change (delete or add). It also retrieves logins from db and saves them to state */\n  reloadList() {\n    if (this.state.isLoaded === false) {\n      console.log(\"Reload list has run.\");\n\n      // Retrieve usernames and passwords from database\n      fetch(\"/getLogins\").then(res => res.json()).then(result => {\n        this.setState({\n          users: result.users,\n          pwords: result.pwords,\n          isLoaded: true\n        }, () => {\n          console.log(\"Logins retrieved from db.\");\n        });\n      }, error => {\n        this.setState({\n          error\n        });\n      });\n      this.getList();\n\n      // End of if statement to check if list of items has been loaded yet.\n    }\n  }\n\n  // Runs when page is first loaded. Retrieves to do list and logins from db and saves them to state\n  componentDidMount() {\n    // If statement to check if data has been fetched already or not. Won't run twice.\n    if (this.state.isLoaded === false) {\n      console.log(\"componentDidMount - Load list has run.\");\n\n      // Retrieve usernames and passwords from database\n      fetch(\"/getLogins\").then(res => res.json()).then(result => {\n        this.setState({\n          users: result.users,\n          pwords: result.pwords,\n          isLoaded: true\n        }, () => {\n          console.log(\"Logins retrieved from db.\");\n        });\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n\n      // End of if statement to check if list has been loaded yet.\n    }\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items,\n      loggedIn,\n      currentUser,\n      idArray,\n      userArray\n    } = this.state;\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 14\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 14\n      }, this);\n    } else if (\n    // if user not yet logged in, only show login form, no to do list\n    this.state.loggedIn === false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          handleLogin: this.handleLogin,\n          handleRegister: this.handleRegister,\n          handleUsername: this.handleUsername,\n          handlePassword: this.handlePassword,\n          loggedIn: loggedIn,\n          handleLogout: this.handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pleaseLogin\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"redHeading\",\n            children: \"Please log in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this);\n    } else {\n      // Else if user is logged in, then show form and to do list for that user\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          currentUser: currentUser,\n          handleLogin: this.handleLogin,\n          handleRegister: this.handleRegister,\n          handleUsername: this.handleUsername,\n          handlePassword: this.handlePassword,\n          loggedIn: loggedIn,\n          handleLogout: this.handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formAndListDiv\",\n          children: [/*#__PURE__*/_jsxDEV(ListForm, {\n            handleAddItem: this.handleAddItem,\n            handleItemToAdd: this.handleItemToAdd,\n            handleDeleteItem: this.handleDeleteItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DisplayList, {\n            currentUser: currentUser,\n            listItems: items,\n            idArray: idArray,\n            userArray: userArray,\n            handleDeleteItem: this.handleDeleteItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this);\n\n      // End of if statement\n    }\n    // End of render function\n  }\n\n  // End of app class component\n}\n\n// Export component so it can be used by index.js\nexport default App;","map":{"version":3,"names":["React","ListForm","Header","DisplayList","jsxDEV","_jsxDEV","App","Component","constructor","props","state","username","password","currentUser","users","pwords","token","isLoaded","items","idArray","userArray","item","itemToDelete","loggedIn","message","error","handleUsername","bind","handlePassword","handleLogin","handleLogout","handleRegister","handleAuth","getList","handleItemToAdd","handleAddItem","handleDeleteItem","reloadList","event","setState","console","log","value","target","trimmedItem","trim","user","pwd","fetch","then","res","json","result","id","undefined","method","headers","Authorization","document","forms","reset","alert","body","JSON","stringify","itemId","componentDidMount","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","listItems"],"sources":["/Users/square1-praise/Documents/HyperionDev Assignment/Level 3/Task 09 Assignment-P022020002822/todolist/frontend/src/App.js"],"sourcesContent":["import React from \"react\";\n\n// Import custom stylesheet\nimport \"./App.css\";\n\n// Import bootstrap styles\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Import components\nimport ListForm from \"./Components/ListForm\";\nimport Header from \"./Components/Header\";\nimport DisplayList from \"./Components/DisplayList\";\n\n// App component Display to do list\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial state variables. Includes array to store to do list.\n    this.state = {\n      username: null,\n      password: null,\n      currentUser: null,\n      users: [],\n      pwords: [],\n      token: \"\",\n      isLoaded: false,\n      items: [],\n      idArray: [],\n      userArray: [],\n      item: null,\n      itemToDelete: \"\",\n      loggedIn: false,\n      message: \"\",\n      error: null,\n    };\n\n    // Binding to make \"this\" work correctly\n    this.handleUsername = this.handleUsername.bind(this);\n    this.handlePassword = this.handlePassword.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.handleAuth = this.handleAuth.bind(this);\n    this.getList = this.getList.bind(this);\n\n    this.handleItemToAdd = this.handleItemToAdd.bind(this);\n    this.handleAddItem = this.handleAddItem.bind(this);\n    this.handleDeleteItem = this.handleDeleteItem.bind(this);\n\n    this.reloadList = this.reloadList.bind(this);\n  }\n\n  // Function to log user out when they click \"logout\" button in header\n  handleLogout(event) {\n    this.setState(\n      {\n        loggedIn: false,\n        isLoaded: false,\n        username: null,\n        password: null,\n        currentUser: null,\n        item: null,\n        token: null,\n        message: null,\n      },\n      () => {\n        console.log(\"User logged out.\");\n        this.reloadList();\n      }\n    );\n  }\n\n  // Add/save list item to state prior to storing in db\n  handleItemToAdd(event) {\n    let value = event.target.value;\n\n    let trimmedItem = value.trim();\n    this.setState({\n      item: trimmedItem,\n    });\n  }\n\n  // Functions to save username and password to state when user types them in to login form in header\n  handleUsername(event) {\n    let value = event.target.value;\n    let user = value.trim();\n    this.setState(\n      {\n        username: user,\n      },\n      () => {\n        console.log(\"Username saved: \" + this.state.username);\n      }\n    );\n  }\n\n  handlePassword(event) {\n    let value = event.target.value;\n    let pwd = value.trim();\n    this.setState({\n      password: pwd,\n    });\n  }\n  // --------------------------------------------------------- //\n\n  // Retrieve list items from db if token is valid\n  getList() {\n    if (this.state.message === \"Success! Token valid.\") {\n      console.log(\"Get list has run\");\n      fetch(\"/getList\")\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.setState({\n              isLoaded: true,\n              items: result.items,\n              idArray: result.id,\n              userArray: result.user,\n            });\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error,\n            });\n          }\n        );\n    }\n  }\n\n  /* Takes token created in \"handleLogin\" function and authenticates user */\n  handleAuth() {\n    let token = this.state.token;\n    if (token !== undefined && token !== \"Incorrect login!\" && token !== null) {\n      fetch(\"/resource\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token,\n        },\n      })\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.setState(\n              {\n                isLoaded: true,\n                loggedIn: true,\n                currentUser: result.currentUser,\n                message: result.message,\n                username: null,\n                password: null,\n              },\n              () => {\n                console.log(\n                  \"handleAuth has run. Welcome, \" + this.state.currentUser\n                );\n                this.getList();\n              }\n            );\n          },\n          (error) => {\n            this.setState({\n              error,\n            });\n          }\n        );\n    } else {\n\n      document.forms[\"loginForm\"].reset();\n      alert(\"Incorrect login details. Please try again.\");\n      console.log(\"Invalid token. Not logged in.\");\n\n      this.reloadList();\n    }\n    // End of handleauth function\n  }\n\n  // Take user login details and create JWT token, then call \"handleAuth\" function to authenticate user\n  handleLogin(event) {\n    if (this.state.username !== null && this.state.password !== null) {\n      fetch(\"/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password,\n          users: this.state.users,\n          pwords: this.state.pwords,\n        }),\n      })\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.setState(\n              {\n                token: result.message,\n              },\n              () => {\n                console.log(\n                  \"Login details sent via post. Token is \" + this.state.token\n                );\n                this.handleAuth();\n              }\n            );\n          },\n          (error) => {\n            this.setState({\n              error,\n            });\n          }\n        );\n    } else {\n      this.setState(\n        {\n          isLoaded: false,\n        },\n        () => {\n          console.log(\"Username and password fields blank.\");\n          alert(\n            \"Please enter your username and password, then click 'Login' again.\"\n          );\n          this.reloadList();\n        }\n      );\n      // End of if statement to check that username and password fields are not empty\n    }\n\n    // End of handlelogin function\n  }\n\n  /* Register new user. Saves their login details to db and makes it so they can only access their own to do \n  list */\n  handleRegister(event) {\n    if (this.state.username !== null && this.state.password !== null) {\n      fetch(\"/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password,\n        }),\n      })\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.setState(\n              {\n                isLoaded: false,\n              },\n              () => {\n                console.log(\"Registration details sent via post.\");\n                alert(\n                  \"New user, \" +\n                    this.state.username +\n                    \", registered. Please log in.\"\n                );\n                this.reloadList();\n              }\n            );\n          },\n          (error) => {\n            this.setState({\n              error,\n            });\n          }\n        );\n    } else {\n      this.setState(\n        {\n          isLoaded: false,\n        },\n        () => {\n          console.log(\"Username and password fields blank.\");\n          alert(\n            \"Please enter your new username and password, then click 'Register' again.\"\n          );\n          this.reloadList();\n        }\n      );\n      // End of if statement to check that state variables \"username\" and \"password\" are not null\n    }\n    // End of handleregister function\n  }\n\n  // Handler function to delete a list item from database when user clicks the little red cross\n  handleDeleteItem(itemId) {\n    fetch(\"/delete\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        id: itemId,\n      }),\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState(\n            {\n              isLoaded: false,\n            },\n            () => {\n              console.log(\n                \"Post request to delete list item sent. \" + result.message\n              );\n              this.reloadList();\n            }\n          );\n        },\n        (error) => {\n          this.setState({\n            isLoaded: false,\n            error,\n          });\n        }\n      );\n    // End of handledeleteitem function\n  }\n\n  // Handler function to add list item to database when user submits form\n  handleAddItem() {\n    if (this.state.item !== null) {\n      fetch(\"/add\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n\n        body: JSON.stringify({\n          user: this.state.currentUser,\n          item: this.state.item,\n        }),\n      })\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.setState(\n              {\n                isLoaded: false,\n              },\n              () => {\n                console.log(\n                  \"Post request to add list item sent. \" + result.message\n                );\n                this.reloadList();\n              }\n            );\n          },\n          (error) => {\n            this.setState({\n              isLoaded: false,\n              error,\n            });\n          }\n        );\n    } else {\n      this.setState(\n        {\n          isLoaded: false,\n        },\n        () => {\n          alert(\n            \"Form is blank. Please type in a list item to save, then click 'Add item' again.\"\n          );\n          this.reloadList();\n        }\n      );\n      // End of if statement to check that user has not submitted empty form field\n    }\n    // End of handleadditem function\n  }\n\n  /* Function to reload list of items from database after a change (delete or add). It also retrieves logins from db and saves them to state */\n  reloadList() {\n    if (this.state.isLoaded === false) {\n      console.log(\"Reload list has run.\");\n\n      // Retrieve usernames and passwords from database\n      fetch(\"/getLogins\")\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.setState(\n              {\n                users: result.users,\n                pwords: result.pwords,\n                isLoaded: true,\n              },\n              () => {\n                console.log(\"Logins retrieved from db.\");\n              }\n            );\n          },\n          (error) => {\n            this.setState({\n              error,\n            });\n          }\n        );\n\n      this.getList();\n\n      // End of if statement to check if list of items has been loaded yet.\n    }\n  }\n\n  // Runs when page is first loaded. Retrieves to do list and logins from db and saves them to state\n  componentDidMount() {\n    // If statement to check if data has been fetched already or not. Won't run twice.\n    if (this.state.isLoaded === false) {\n      console.log(\"componentDidMount - Load list has run.\");\n\n      // Retrieve usernames and passwords from database\n      fetch(\"/getLogins\")\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            this.setState(\n              {\n                users: result.users,\n                pwords: result.pwords,\n                isLoaded: true,\n              },\n              () => {\n                console.log(\"Logins retrieved from db.\");\n              }\n            );\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error,\n            });\n          }\n        );\n\n      // End of if statement to check if list has been loaded yet.\n    }\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items,\n      loggedIn,\n      currentUser,\n      idArray,\n      userArray,\n    } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else if (\n      // if user not yet logged in, only show login form, no to do list\n      this.state.loggedIn === false\n    ) {\n      return (\n        <div className=\"app\">\n          <Header\n            handleLogin={this.handleLogin}\n            handleRegister={this.handleRegister}\n            handleUsername={this.handleUsername}\n            handlePassword={this.handlePassword}\n            loggedIn={loggedIn}\n            handleLogout={this.handleLogout}\n          />\n          <div className=\"pleaseLogin\">\n            <h2 className=\"redHeading\">Please log in</h2>\n          </div>\n        </div>\n      );\n    } else {\n      // Else if user is logged in, then show form and to do list for that user\n      return (\n        <div className=\"app\">\n          <Header\n            currentUser={currentUser}\n            handleLogin={this.handleLogin}\n            handleRegister={this.handleRegister}\n            handleUsername={this.handleUsername}\n            handlePassword={this.handlePassword}\n            loggedIn={loggedIn}\n            handleLogout={this.handleLogout}\n          />\n          <div className=\"formAndListDiv\">\n            <ListForm\n              handleAddItem={this.handleAddItem}\n              handleItemToAdd={this.handleItemToAdd}\n              handleDeleteItem={this.handleDeleteItem}\n            />\n            <DisplayList\n              currentUser={currentUser}\n              listItems={items}\n              idArray={idArray}\n              userArray={userArray}\n              handleDeleteItem={this.handleDeleteItem}\n            />\n          </div>\n        </div>\n      );\n\n      // End of if statement\n    }\n    // End of render function\n  }\n\n  // End of app class component\n}\n\n// Export component so it can be used by index.js\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}